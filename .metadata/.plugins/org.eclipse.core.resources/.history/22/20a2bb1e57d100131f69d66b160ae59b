package com.heymitch.skiplist;

import java.util.*;

public class MainClass
{
	
	public static void main(String[] args) 
	{
		ConcurrentSkipList<Integer> skipList = new ConcurrentSkipList<Integer>();
		
		for(int i = 0; i <= 10000; i++) { // add 0 through 10,000 to skipList
			skipList.add(i);
		}
		
		ArrayList threadList = new ArrayList<ContainsTest>();	// arrayList of CointainsTest threads
		
		for(int i = 0; i < 10; i++){							// create the ContainsTest threads (10)
			ContainsTest mt = new ContainsTest (skipList, i);
		    threadList.add(mt);									// add it to the array list
		}
		
		Iterator<ContainsTest> threadItr = threadList.iterator();
		
		long startTime = System.nanoTime();
		
		while( threadItr.hasNext() ){
			ContainsTest current = threadItr.next();
			current.start();
		}
		
		threadItr = threadList.iterator();
		while( threadItr.hasNext() ){							// start each thread
			try {												// call join on it so main waits for it
				ContainsTest current = threadItr.next();
				System.out.println("Before join");
				current.join();
			} catch (InterruptedException e) {
				System.out.println("Interrupted, but nobody cares :D");
			}
		}
		
		long endTime = System.nanoTime();
		long duration = (endTime - startTime) / 1000000;
		
		System.out.println("Test took " + duration + "ms");
	}
}

/*
 * ContainsTest
 *  a thread that does 10,000 random contains test on the concurrent skiplist
 *  I start 10 of these threads above
 */
class ContainsTest extends Thread
{
   ConcurrentSkipList dataSet;
   Random rand = new Random();
   int num;
   public ContainsTest(ConcurrentSkipList skipList, int number){
	   super();
	   dataSet = skipList;
	   num = number;
   }
   public void run ()
   {
	    for(int i = 0; i < 10000; i++){
	    	dataSet.contains(rand.nextInt(10000));
	    }
	    System.out.println("Thread finishing: " + this.num);
   }
}